#include <iostream>
#include <stack>
#include <vector>

using namespace std;

struct Node {
    int numero;
    Node* next;
};

struct Proceso {
    int id;
};

struct Arbol {
    int data;
    Arbol* left;
    Arbol* right;
};

Arbol* createNode(int value) {
    Arbol* newNode = new Arbol;
    newNode->data = value;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}


void insert(Node*& head, int value) {
    Node* newNode = new Node;
    newNode->numero = value;
    
    if (head == nullptr) {
        newNode->next = newNode;
        head = newNode;
    } else if (value <= head->numero) {
        Node* last = head;
        while (last->next != head) {
            last = last->next;
        }
        newNode->next = head;
        last->next = newNode;
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != head && current->next->numero < value) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}


void insert(Arbol*& root, int value) {
    if (root == nullptr) {
        root = createNode(value);
    } else {
        if(value == root->data) {
            
        }
        if (value <= root->data) {
            if(value == root->data) {
                
            }
            else {
                insert(root->left, value);
            }
        } else {
            if(value == root->data) {
               
            }
            else {
                insert(root->right, value);
            }
        }
    }
}


void display(Arbol* root) {
    if (root == nullptr) {
        return;
    }
    display(root->left);
    cout << root->data << " ";
    display(root->right);
}

int main() {
    
    Node* head = nullptr;
    int id;
    
    vector<stack<Proceso>> pilas(3);
    int opcion, prioridad;
    
    Arbol* root = nullptr;

    do {
        cout << "1. Insertar proceso\n";
        cout << "2. Atender proceso\n";
        cout << "3. Mostrar procesos (Pila, Arbol)\n";
        cout << "4. Salir\n";
        cout << "Ingrese la opción: ";
        cin >> opcion;
        cout << endl;

        switch (opcion) {
            case 1:
                cout << "Ingrese el valor del proceso: ";
                cin >> id;
                cout << "Ingrese la prioridad del proceso (1-3): ";
                cin >> prioridad;
                
                if (prioridad < 1 || prioridad > 3) {
                    cout << "Prioridad inválida. Debe ser un número entre 1 y 3.\n";
                } 
                else {
                    pilas[prioridad - 1].push({id});
                    
                }
                
                if (root == nullptr) {
                    root = createNode(id);
                }
                else {
                    insert(root, id);
                }
                
                insert(head, id);
                
                cout << endl;
                
                break;
                
            case 2:
                for (int i = 2; i >= 0; --i) {
                    if (!pilas[i].empty()) {
                        cout << "Proceso " << pilas[i].top().id << " con prioridad " << i + 1 << " atendido\n";
                        pilas[i].pop();
                        break;
                    }
                }
                cout << endl;
                break;
                
            case 3:
                for (int i = 2; i >= 0; --i) {
                    if (!pilas[i].empty()) {
                        stack<Proceso> copia = pilas[i];
                        while (!copia.empty()) {
                            cout << endl << "Proceso " << copia.top().id << " con prioridad " << i + 1 << "\n";
                            copia.pop();
                        }
                    }
                }
                
                if (root == nullptr) {
                    cout << "El arbol esta vacio." << endl;
                } else {
                    cout << endl <<"Arbol actual: ";
                    display(root);
                    cout << endl;
                }
                
                cout << endl;
                break;
                
            case 4:
                cout << "Saliendo...\n";
                break;
            default:
                cout << "Opción inválida\n";
        }
    } while (opcion != 4);
    
    return 0;
}